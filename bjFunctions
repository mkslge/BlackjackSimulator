public class BlackjackModel {
	private static final int  TO_ADD = 10;
	private static final int THRESHHOLD = 11;
	private static final int WINNING_NUM = 21;
	private static final int MIN_CARDS = 2;
	private ArrayList<Card> dealer;
	
	private ArrayList<Card> player;
	
	private Deck deck;
	
	/* 
	 * Getter for dealer
	 */
	public ArrayList<Card> getDealerCards() {
		return new ArrayList<>(dealer);
		
	}
	
	/*
	 * Getter for player
	 */
	public ArrayList<Card> getPlayerCards() {
		return new ArrayList<>(player);
		
	}
	
	/*
	 * Setter for dealer
	 */
	public void setDealerCards(ArrayList<Card> cards) {
		ArrayList<Card> dealer = new ArrayList<>();
		int length = cards.size();
		
		for(int i = 0; i < length;i++) {
			Card card = cards.get(i); 
			dealer.add(card);
		}
		
		this.dealer = new ArrayList<>(dealer);
	}
	
	/*
	 * Setter for player
	 */
	public void setPlayerCards(ArrayList<Card> cards) {
		ArrayList<Card> player = new ArrayList<>();
		int length = cards.size();
		
		for(int i = 0; i < length;i++) {
			
			Card card = cards.get(i);
			player.add(card);
		}
		
		this.player = new ArrayList<>(player);
	}
	
	/*
	 * Creates Deck
	 */
	public void createAndShuffleDeck(Random random) {
		deck = new Deck();
		deck.shuffle(random);
	}
	
	/*
	 * Gives dealer cards
	 */
	public void initialDealerCards() {
		dealer = new ArrayList<>();
		dealer.add(deck.dealOneCard());
		dealer.add(deck.dealOneCard());
	}
	
	/*
	 * Gives player cards
	 */
	public void initialPlayerCards() {
		player = new ArrayList<>();
		player.add(deck.dealOneCard());
		player.add(deck.dealOneCard());
	}
	
	/* 
	 * Player draws card
	 */
	public void playerTakeCard() {
		player.add(deck.dealOneCard());
	}
	
	/*
	 * Dealer draws card
	 */
	public void dealerTakeCard() {
		dealer.add(deck.dealOneCard());
	}
	
	/*
	 * Checks all possible hand values of hand
	 */
	public static ArrayList<Integer> possibleHandValues(ArrayList<Card> hand) {
		ArrayList<Integer> sol = new ArrayList<>();
		int minSum = 0;
		boolean ace = false;
		int length = hand.size();
		
		for(int i = 0; i < length;i++) {
			minSum += hand.get(i).getRank().getValue();
			if(hand.get(i).getRank().equals(Rank.ACE)) {
				ace = true;
			}
		}
		
		sol.add(minSum);
		if(minSum >= THRESHHOLD && ace) {
			sol.add(minSum + TO_ADD);
		}
		
		return sol;
	}
	
	/*Checks what hand is
	 * 
	 */
	public static HandAssessment assessHand(ArrayList<Card> hand) {
		int length = hand.size();
		
		if( length < MIN_CARDS ||  hand  == null) {
			return HandAssessment.INSUFFICIENT_CARDS;
		} 
		
		ArrayList<Integer> handVals = possibleHandValues(hand);
		
		if(handVals.contains(WINNING_NUM) && length == MIN_CARDS) {
			return HandAssessment.NATURAL_BLACKJACK;
		}
			
		if(handVals.get(0) < 22) {
			return HandAssessment.NORMAL;
		}
		
		//must be bust
		return HandAssessment.BUST;
		
	}
	/*
	 * What is the result of the game?
	 */
	public GameResult gameAssessment() {
			
			//if player busts then auto loss
			if(assessHand(player) == HandAssessment.BUST) {
				return GameResult.PLAYER_LOST;
			} else if(assessHand(dealer) == HandAssessment.BUST) { // else if dealer does then they lose
				return GameResult.PLAYER_WON;
				//if both get natural blackjack its a tie
			} else if(assessHand(player) == HandAssessment.NATURAL_BLACKJACK && assessHand(dealer) != HandAssessment.NATURAL_BLACKJACK) {
				return GameResult.PUSH;
				//if only player does he auto wins
			} else if(assessHand(player) == HandAssessment.NATURAL_BLACKJACK) {
				return GameResult.NATURAL_BLACKJACK;
			}
		
		//checks for cases when both players have normal cards
		//saves dealers hand values
		ArrayList<Integer> dealerHand = possibleHandValues(dealer);
		//saves dealers hand value
		ArrayList<Integer> playerHand = possibleHandValues(player);
		//iterating through to find best score
		int playerVal = 0;
		int size = playerHand.size();
		while(playerVal < size && playerHand.get(playerVal++) <= WINNING_NUM);
		if(playerVal != size) {
			playerVal--;
		}
		
		
		int dealerVal = 0;
		size = dealerHand.size();
		while(dealerVal < size && dealerHand.get(dealerVal++) <= WINNING_NUM);
		if(dealerVal != size) {
			dealerVal--;
		}
		
		
		
		
		//check who has more points
		if(playerHand.get(playerVal) > dealerHand.get(dealerVal)) {
			return GameResult.PLAYER_WON;
		} else if(playerHand.get(playerVal) < dealerHand.get(dealerVal)) {
			return GameResult.PLAYER_LOST;
		}
		
		return GameResult.PUSH;
		
	}
	
	/*
	 * should dealer take another card?
	 */
	public boolean dealerShouldTakeCard() {
		//saves possible dealer values
		ArrayList<Integer> saveHandDealer = possibleHandValues(dealer);
		int length = saveHandDealer.size();
		int min = saveHandDealer.get(0);
		int max = saveHandDealer.get(length - 1);
			
		//grabs another card
		if(max <= 16) {
			return true;
		} else if(max == 17 && min == 7) {
			//case of ace
			return true;
		}
		//otherwise stands
		return false;
		
		

		
		
	}
	
	
	
	
}
